---
import { Image } from "astro:assets";
import Placeholder from "~/assets/prototype.png";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";

export type Props = {
  src: string;
};

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { src } = Astro.props;
---

<prototype-component data-src={src} data-alt="Prototype">
  <Image src={Placeholder} alt="Prototype placeholder" />
  <span>{t("case.prototypetitle")}</span>
</prototype-component>

<script>
  class Prototype extends HTMLElement {
    placeholderImageContainer: HTMLDivElement | null;

    handleClick() {
      this.placeholderImageContainer = null;
      while (this.firstElementChild) {
        let child = this.firstElementChild;
        this.removeChild(child);
      }
      if (this.dataset.src && this.dataset.alt) {
        let prototype = document.createElement("iframe");
        prototype.src = this.dataset.src;
        prototype.width = "100%";
        prototype.height = "600";
        prototype.style.border = "none";
        prototype.title = this.dataset.alt;
        this.appendChild(prototype);
      }
    }

    constructor() {
      super();
      let shadowRoot = this.attachShadow({ mode: "open" });
      shadowRoot.innerHTML = `
      <div id="iframe-prototype" class="container">
        <div role="button" id="button">
          <slot/>
        </div>
      </div>
      <style>
        div {
          display: flex;
          overflow: hidden;
          position: relative;
          justify-content: center;
          align-items: center;
          width: 100%;
          height: 600px;
          background-color: darkgrey;
          cursor: pointer;
        }
        .container {
          scroll-margin-top: 4rem;
        }
        iframe {
          border: none;
        }
      </style>
      `;
    }

    connectedCallback() {
      let placeholderImageContainer = this.shadowRoot!.querySelector(
        "div#iframe-prototype",
      ) as HTMLDivElement;
      this.placeholderImageContainer = placeholderImageContainer;
      placeholderImageContainer.addEventListener(
        "click",
        this.handleClick.bind(this),
      );
    }

    disconnectedCallback() {
      this.placeholderImageContainer?.removeEventListener(
        "click",
        this.handleClick.bind(this),
      );
    }
  }
  customElements.define("prototype-component", Prototype);
</script>

<style>
  prototype-component {
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 100%;
    margin: 1rem 0 1rem 0;
  }
  span {
    position: absolute;
    user-select: none;
    pointer-events: none;
    font-size: 2.5rem;
    color: white;
    text-align: center;
    font-weight: 500;
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  @media (min-width: 768px) {
    img {
      filter: blur(8px);
      transition: filter 0.2s ease-in-out;
    }
    img:hover {
      filter: none;
    }
  }
</style>
