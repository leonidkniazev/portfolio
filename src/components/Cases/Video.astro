---
export type Props = {
  src: string;
};
const { src } = Astro.props;
---

<custom-video data-src={src}></custom-video>

<script>
  class Video extends HTMLElement {
    video: HTMLVideoElement;

    constructor() {
      super();
      let shadowRoot = this.attachShadow({ mode: "open" });
      shadowRoot.innerHTML = `
      <video autoplay loop muted playsinline>
        Your browser can't play videos
      </video>
      <style>
        video {
          width: 100%;
        }
      </style>
      `;
    }

    preventEvents(e: Event) {
      e.preventDefault();
    }

    disableFullscreen(e: Event) {
      e.preventDefault();
      let fullScreenElement = document.fullscreenElement;
      if (fullScreenElement == this || fullScreenElement == this.video) {
        document.exitFullscreen();
      }
    }

    connectedCallback() {
      let src = this.dataset.src;
      let video = this.shadowRoot!.querySelector("video");
      if (src && video) {
        video.src = src;
        this.video = video;
        video.addEventListener("contextmenu", this.preventEvents);
        video.addEventListener(
          "fullscreenchange",
          this.disableFullscreen.bind(this),
        );
      }
    }

    disconnectedCallback() {
      this.video.removeEventListener("contextmenu", this.preventEvents);
      this.video.removeEventListener(
        "fullscreenchange",
        this.disableFullscreen.bind(this),
      );
    }
  }

  customElements.define("custom-video", Video);
</script>

<style>
  custom-video {
    margin: 2rem 0 1rem 0;
  }
</style>
