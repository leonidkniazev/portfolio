---
const slot = await Astro.slots.render("default");

function generateContent(data: string, token: string) {
  let chunks = data.replaceAll("\n", "").split("");
  let splitPoints: number[] = [];
  let shouldSplit = false;
  let openTags = 0;

  for (let i = 0; i < chunks.length; i++) {
    let chunk = chunks[i];
    if (chunk == "<" && chunks[i + 1] !== "/") {
      if (chunks[i + 1] != "i" && chunks[i + 2] != "m" && chunks[i + 3] != "g")
        openTags++;
    }
    if (
      (chunk == ">" && chunks[i - 1] == "/") ||
      (chunk == "<" && chunks[i + 1] == "/")
    ) {
      openTags--;
    }

    if (token.split("").every((token, idx) => token == chunks[i + idx])) {
      shouldSplit = true;
    }

    if (shouldSplit && openTags == 0) {
      if (chunk == ">") {
        splitPoints.push(i + 1);
        shouldSplit = false;
      }
    }
  }

  let result: string[] = [];
  if (splitPoints.length == 0) {
    result.push(slot.replaceAll(token, ""));
    return result;
  }
  if (splitPoints[0])
    result.push(chunks.slice(0, splitPoints[0]).join("").replaceAll(token, ""));

  for (let i = 0; i < splitPoints.length; i++) {
    let point = splitPoints[i];
    let nextPoint = splitPoints[i + 1];
    if (nextPoint) {
      result.push(
        chunks.slice(point, nextPoint).join("").replaceAll(token, ""),
      );
    }
  }

  let lastPoint = splitPoints.at(-1);
  if (lastPoint)
    result.push(
      chunks.slice(lastPoint, chunks.length).join("").replaceAll(token, ""),
    );
  return result;
}
export type Props = {
  delimiter?: string;
};
const { delimiter } = Astro.props;
const content = generateContent(slot, delimiter ?? "@@");
---

<div class="container">
  {content.map((item) => <div class="column" set:html={item} />)}
</div>

<style>
  .container {
    display: flex;
    gap: 2rem;
    margin: 1rem 0;
    flex-wrap: wrap;
  }
  .column {
    flex: 1;
    height: fit-content;
  }
</style>
