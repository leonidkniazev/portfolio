<template id="running_row_content_template">
  <div>CERTIFICATES</div>
</template>

<template id="running_row_styles_template">
  <style>
    div {
      font-weight: 700;
      font-size: 1.7rem;
      color: white;
      padding: 0px 1rem;
      white-space: nowrap;
      font-family: Montserrat;
      line-height: 150%;
    }
  </style>
</template>

<div class="wrapper">
  <running-row style="rotate:0.13rad;filter:none"></running-row>
  <running-row style="rotate:-0.05rad"></running-row>
</div>

<script>
  const ELEMENT_SIZE = 70;
  const ANIMATION = [
    {
      transform: "translateX(0)",
    },
    {
      transform: "translateX(-100%)",
    },
  ];
  const ANIMATION_OPTIONS = {
    duration: 2000,
    iterations: Infinity,
  };

  class RunningRow extends HTMLElement {
    private runningRowContentTemplate: HTMLTemplateElement;

    private getElementsAmount() {
      return Math.max(10, Math.floor(window.innerWidth / ELEMENT_SIZE));
    }

    private resetAnimation(elements: HTMLDivElement[]) {
      for (let i = 0; i < elements.length; i++) {
        elements[i].animate(ANIMATION, ANIMATION_OPTIONS);
      }
    }

    private createDiv() {
      return this.runningRowContentTemplate.content.cloneNode(true)
        .firstChild as HTMLDivElement;
    }

    private handleResize() {
      const oldAmount = this.children.length;
      const newAmount = this.getElementsAmount();
      if (oldAmount < newAmount) {
        const div = this.createDiv();
        this.elements.push(div);
        this.append(div);
        this.resetAnimation(this.elements);
      }
      if (oldAmount > newAmount) {
        let elementToRemove = this.elements.pop();
        if (elementToRemove) this.removeChild(elementToRemove);
      }
    }

    private elements: HTMLDivElement[];

    constructor() {
      super();
      let shadowRoot = this.attachShadow({ mode: "open" });
      let styles = document.getElementById(
        "running_row_styles_template",
      ) as HTMLTemplateElement;
      shadowRoot.appendChild(styles.content.cloneNode(true));
    }
    connectedCallback() {
      this.runningRowContentTemplate = document.getElementById(
        "running_row_content_template",
      ) as HTMLTemplateElement;
      let amount = this.getElementsAmount();
      this.elements = [...Array(amount)].map(() => {
        const div = this.createDiv();
        console.log(div);
        this.shadowRoot!.append(div);
        div.animate(ANIMATION, { duration: 2000, iterations: Infinity });
        return div;
      });
      window.addEventListener("resize", this.handleResize.bind(this));
    }
    disconnectedCallback() {
      window.removeEventListener("resize", this.handleResize.bind(this));
    }
  }

  customElements.define("running-row", RunningRow);
</script>

<style>
  running-row {
    display: flex;
    position: absolute;
    padding: 5px 0;
    width: calc(100vw + 60%);
    transform: translateX(-10%);
    background-color: black;
    overflow: hidden;
    filter: drop-shadow(0 10px 10px rgb(0 0 0 / 0.3));
  }
  .wrapper {
    transform: translateY(-20px);
    height: 10rem;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: start;
  }
</style>
