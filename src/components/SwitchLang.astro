---
import { getLangFromUrl } from "../i18n/utils";
import { defaultLang, locales } from "../i18n/ui";

export type Props = {
  selected: ReturnType<typeof getLangFromUrl>;
};

function createUrl(locale: keyof typeof locales) {
  let result = "/";
  let rest = "";
  if (defaultLang == selected) {
    rest = Astro.url.pathname.split("/").filter(Boolean).join("/");
  } else {
    let [, ...buf] = Astro.url.pathname.split("/").filter(Boolean);
    rest = buf.join("/");
  }

  if (locale == defaultLang) {
    if (rest) result += `${rest}/`;
  } else {
    if (rest) result += `${locale}/${rest}/`;
    else result += `${locale}/`;
  }
  return result;
}
const { selected } = Astro.props;
const languages = Object.keys(locales) as (keyof typeof locales)[];
---

<div>
  {
    languages.map((lang, idx) => {
      const isActive = selected === lang;
      return (
        <>
          <a class={isActive ? "active" : ""} href={createUrl(lang)}>
            {lang}
          </a>
          {languages.length - 1 !== idx && <span>{" / "}</span>}
        </>
      );
    })
  }
</div>

<style>
  span {
    color: white;
  }
  a {
    font-family: Ysabeau;
    text-transform: uppercase;
  }
  .active {
    font-weight: 700;
    text-decoration: underline;
  }
</style>
