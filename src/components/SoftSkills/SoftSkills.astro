---
import Section from "../Section.astro";
import SoftSkill from "./SoftSkill.astro";
---

<Section isDark>
  <div class="container">
    <skill-row data-number={1} class="skillz">
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever but longer" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever but longer" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
    </skill-row>
    <skill-row data-number={2} class="skillz">
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever but longer" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
      <SoftSkill name="whatever" />
    </skill-row>
    <div class="tree-container">
      <div class="tree">
        <img class="tree-img" src="/tree.png" />
        <img class="letters" src="/tree_letters.svg" />
      </div>
    </div>
  </div>
</Section>

<script>
  class SkillRow extends HTMLElement {
    constructor() {
      super();
      const handleScroll = () => {
        const boundingRect = this.getBoundingClientRect();
        if (
          boundingRect.top - window.innerHeight < window.scrollY &&
          boundingRect.top > 0
        ) {
          const percent = (boundingRect.top / window.innerHeight / 2) * 100;
          console.log(percent, this.dataset.number);
          if (+this.dataset.number & 1)
            this.style.transform = `translateX(${-percent}vw)`;
          else this.style.transform = `translateX(${percent}vw)`;
        }
      };
      document.addEventListener("scroll", handleScroll);
    }
  }
  customElements.define("skill-row", SkillRow);
</script>

<style>
  .container {
    position: relative;
    background-color: black;
    padding: 30px 0;
  }
  skill-row {
    display: flex;
    transition: all 0.3s ease;
    transition-delay: 0ms;
    margin-bottom: 1.2rem;
    gap: 1rem;
    align-items: start;
    justify-content: start;
  }
  skill-row:nth-child(even) {
    align-items: end;
  }
  .tree-container {
    height: 15rem;
  }
  .tree {
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 100;
    bottom: 0;
    right: 0;
    transform: translateY(50%);
  }
  .tree-img {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: block;
    width: 80%;
    height: 85%;
  }
  svg {
  }
  @media (width<1280px) {
    .tree-container {
      display: none;
    }
  }
</style>
