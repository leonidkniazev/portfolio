---
import { getEntry } from "astro:content";
import { getLangFromUrl } from "../../i18n/utils";
import Section from "../Section.astro";
import SoftSkill from "./SoftSkill.astro";
const lang = getLangFromUrl(Astro.url);
const portfolio = await getEntry("portfolio", `${lang}/data`);
const { softSkills } = portfolio.data;
const middleIndex = Math.ceil(softSkills.length / 2);
const firstHalf = softSkills.splice(0, middleIndex);
const secondHalf = softSkills.splice(-middleIndex);
---

<div class="container">
  <skill-row data-number={1} class="skillz">
    {firstHalf.map((item) => <SoftSkill name={item} />)}
  </skill-row>
  <skill-row data-number={2} class="skillz">
    {secondHalf.map((item) => <SoftSkill name={item} />)}
  </skill-row>
</div>
<Section isDark>
  <div class="tree-container">
    <div class="tree">
      <img class="tree-img" src="/tree.png" />
      <img class="letters" src="/tree_letters.svg" />
    </div>
  </div>
</Section>

<script>
  class SkillRow extends HTMLElement {
    constructor() {
      super();
      const handleScroll = () => {
        const boundingRect = this.getBoundingClientRect();
        if (
          boundingRect.top - window.scrollY + window.innerHeight <
            window.innerHeight &&
          boundingRect.top > 0
        ) {
          const percent = (boundingRect.top / window.scrollY) * 100;
          if (+this.dataset.number & 1)
            this.style.transform = `translateX(${percent}%)`;
          else this.style.transform = `translateX(${-percent}%)`;
        }
      };
      document.addEventListener("scroll", handleScroll);
    }
  }
  customElements.define("skill-row", SkillRow);
</script>

<style>
  .container {
    position: relative;
    background-color: black;
    width: 100%;
    padding-bottom: 2rem;
  }
  skill-row {
    display: flex;
    transition: all 0.3s ease;
    transition-delay: 0ms;
    gap: 1rem;
    padding-top: 1rem;
    align-items: center;
    justify-content: start;
    transform: translateX(-100%);
  }
  skill-row:nth-child(even) {
    justify-content: end;
    transform: translateX(100%);
  }
  .tree-container {
    height: 18rem;
  }
  .tree {
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    bottom: 0;
    right: 0;
    transform: translateY(50%);
  }
  .tree-img {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: block;
    width: 80%;
    height: 85%;
  }
  svg {
  }
  @media (max-width: 1280px) {
    .tree-container {
      display: none;
    }
  }
</style>
